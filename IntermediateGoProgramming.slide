Intermediate Go Programming - Part 1
Make things work...


Deepak Gunjetti
Solution Architect @ Andcloud
deepak@andcloud.io 
@dgunjetti

* Data Structures

* Package container/list

- Element is an element of a linked list.

.code -edit src/01-DataStructures/snippet/main.go  /START OMIT/,/END OMIT/

- List represents a doubly linked list.

.code -edit src/01-DataStructures/snippet/main.go  /START1 OMIT/,/END1 OMIT/

- New returns an initialized list.

.code -edit src/01-DataStructures/snippet/main.go  /START2 OMIT/,/END2 OMIT/

* container/list (cont.)

- PushFront inserts a new element e with value v at the front of list l and returns e.

.code -edit src/01-DataStructures/snippet/main.go  /START3 OMIT/,/END3 OMIT/

- PushBack inserts a new element e with value v at the back of list l and returns e.

.code -edit src/01-DataStructures/snippet/main.go  /START4 OMIT/,/END4 OMIT/

- To iterate over a list

.code -edit src/01-DataStructures/snippet/main.go  /START5 OMIT/,/END5 OMIT/

- Remove removes e from l if e is an element of list l. It returns the element value e.Value. The element must not be nil.

.code -edit src/01-DataStructures/snippet/main.go  /START6 OMIT/,/END6 OMIT/

* container/list (cont.)

.play -edit src/01-DataStructures/containerListPkg/main.go  /START1 OMIT/,/END1 OMIT/

.code -edit src/01-DataStructures/containerListPkg/main.go  /START OMIT/,/END OMIT/

* stack 

.code -edit src/01-DataStructures/stack/main.go /START OMIT/,/END OMIT/

* stack (cont.)

.play -edit src/01-DataStructures/stack/main.go /START2 OMIT/,/END2 OMIT/

* Queue

.code -edit src/01-DataStructures/queue/main.go /START OMIT/,/END OMIT/

* Queue (cont.)

.play -edit src/01-DataStructures/queue/main.go /START2 OMIT/,/END2 OMIT/

* Queue via channels 

.code -edit src/01-DataStructures/queue2/main.go /START OMIT/,/END OMIT/

* Queue via channels(cont.)

.play -edit src/01-DataStructures/queue2/main.go /START2 OMIT/,/END2 OMIT/

* Binary tree

.code -edit src/01-DataStructures/binaryTree/main.go /START1 OMIT/,/END1 OMIT/

* Binary tree (cont.)

.code -edit src/01-DataStructures/binaryTree/main.go /START2 OMIT/,/END2 OMIT/

* Binary tree (cont.)

.code -edit src/01-DataStructures/binaryTree/main.go /START3 OMIT/,/END3 OMIT/

* Binary tree (cont.)

.play -edit src/01-DataStructures/binaryTree/main.go /START4 OMIT/,/END4 OMIT/

* Design Patterns

* Singleton Design Pattern

- Having unique instance of a type in the application.

.code -edit src/02-DesignPatterns/singleton/repo/main.go /START1 OMIT/,/END1 OMIT/

* Singleton (cont.)

.code -edit src/02-DesignPatterns/singleton/repo/main.go /START2 OMIT/,/END2 OMIT/

* Singleton (cont.)

.play -edit src/02-DesignPatterns/singleton/repo/main.go /START3 OMIT/,/END3 OMIT/

* Builder Pattern

- Abstracts complex creations so that object creation is separated from the object user

- Create an object step by step by filling its fields and creating the embedded objects

- Reuse the object creation algorithm between many objects.

* Builder Pattern (cont.)

- The Builder design pattern has been commonly described as the relationship between a director, a few Builders, and the product they build. 

- The director is the one in charge of construction of the objects, but the builders are the ones that return the actual object. 

- Example - vehicle manufacturing

- The process of creating a vehicle is more or less the same for every kind of vehicle.

- That process could be representated via interfaces and individual type of vehicle builder could implement the interface.

* Builder Pattern (cont.)

.code -edit src/02-DesignPatterns/builder/main.go /START1 OMIT/,/END1 OMIT/

- On every 'Set' step, we return the same build process, so we can chain various steps together in the same statement.

* Builder Pattern (cont.)

.code -edit src/02-DesignPatterns/builder/main.go /START2 OMIT/,/END2 OMIT/

* Builder Pattern (cont.)

- CarBuilder implements every method defined in the BuildProcess interface. 

-  Director accept builders and construct vehicles together with them.

* Builder Pattern (cont.)

.code -edit src/02-DesignPatterns/builder/main.go /START3 OMIT/,/END3 OMIT/

* Factory method 

- 


